#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.0.2
#  in conjunction with Tcl version 8.6
#    Mar 18, 2020 07:45:30 PM EDT  platform: Windows NT
#    Mar 19, 2020 11:52:49 AM EDT  platform: Windows NT

import sys

import time, threading, math

try:
    from pyfirmata import Arduino, util
except:
    import pip
    pip.main(['install','pyfirmata'])
    from pyfirmata import Arduino, util
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


board = Arduino('COM3') #Confirm port on Rasp. Pi

LED_pin = 13

relay_pin = 12

pressure_sensor_pin = 0

flow_sensor_pin = 10

step_pin = 5
dir_pin = 2
en_pin = 8
CW_pin = 4
CWW_pin = 7

Glass_Size_Time = 5 # seconds


def set_Tk_var():
    global CheckSampler,CheckSmall, CheckLarge
    CheckSampler = tk.IntVar()
    CheckSmall = tk.IntVar()
    CheckLarge = tk.IntVar()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def COMMAND_START_POUR():
    print('Kegerator_V2_support.COMMAND_START_POUR')
    sys.stdout.flush()

def COMMAND_STOP_POUR():
    print('Kegerator_V2_support.COMMAND_STOP_POUR')
    sys.stdout.flush()

def COMMAND_CLEAN():
    print('Kegerator_V2_support.COMMAND_CLEAN')
    sys.stdout.flush()

def COMMAND_RESET_CUMULATIVE():
    print('Kegerator_V2_support.COMMAND_RESET_CUMULATIVE')
    sys.stdout.flush()

def COMMAND_RESET_KEG_LEVEL():
    print('Kegerator_V2_support.COMMAND_RESET_KEG_LEVEL')
    sys.stdout.flush()

############## Added Fuctions ###################################

def COMMAND_SAMPLER(): #Not Used
    print('Kegerator_V2_Carbon_support.COMMAND_SAMPLER')
    sys.stdout.flush()

def COMMAND_SMALL(): #Not Used
    print('Kegerator_V2_Carbon_support.COMMAND_SMALL')
    sys.stdout.flush()

def COMMAND_LARGE(): #Not Used
    print('Kegerator_V2_Carbon_support.COMMAND_LARGE')
    sys.stdout.flush()

####################################################################

def RELAY_ON():
    print('Relay ON - pouring...')
    board.digital[relay_pin].write(1)
    relay_timer = threading.Timer(Glass_Size_Time, RELAY_OFF)
    # Glass_Size_Time to be adjusted with dropdown box from GUI
    relay_timer.start()

####################################################################

def RELAY_OFF():
    print('Relay OFF - pouring stopped')
    board.digital[relay_pin].write(0)
    LED_OFF()
    
########################################################################

def PRESSURE_SENSOR_READ():
    print("Reading CO2 Pressure")
    it = util.Iterator(board)
    it.start()
    board.analog[pressure_sensor_pin].enable_reporting()
    pressureVal = board.analog[pressure_sensor_pin].read()
    voltage = (pressure * 5.0) / 1023
    pressure_pascal = 300000 * (float(voltage) - 0.5)
    pressure_psi = pressure_pascal / 6895
    print("Pressure Reading: " + str(pressure_psi) + " psi")

########################################################################

def LED_ON():
    board.digital[13].write(1)

def LED_OFF():
    board.digital[13].write(0)
    


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import Kegerator_V2
    Kegerator_V2.vp_start_gui()





